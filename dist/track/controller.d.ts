/// <reference types="jquery" />
import Genoverse from './../genoverse';
import TrackModel from './model';
import TrackView from './view';
export default abstract class TrackController {
    repeatLabels: any;
    featureMargin: any;
    labels: string | boolean;
    invert: any;
    unsortable: any;
    border: any;
    featureHeight: number;
    id: any;
    imgContainers: any;
    labelPositions: any;
    legendType: any;
    name: string;
    disabled: boolean;
    lengthMap: any;
    _interface: any;
    _currentConfig: {
        prop: {};
        func: {};
    };
    resizable: string | boolean;
    initialHeight: any;
    margin: any;
    hideEmpty: any;
    defaultAutoHeight: any;
    autoHeight: boolean | string;
    height: any;
    defaultHeight: any;
    controls: any;
    defaultConfig: any;
    configSettings: any;
    config: any;
    legend: any;
    models: {
        [key: string]: TrackModel;
    };
    model: TrackModel;
    views: {
        [key: string]: TrackView;
    };
    view: TrackView;
    controller: any;
    stranded: any;
    expander: any;
    labelTop: any;
    fullVisibleHeight: number;
    thresholdMessage: any;
    scale: any;
    context: any;
    messageContainer: JQuery<HTMLElement>;
    imgContainer: JQuery<HTMLElement>;
    scrollContainer: JQuery<HTMLElement>;
    container: JQuery<HTMLElement>;
    menus: JQuery<HTMLElement>;
    minLabelHeight: number;
    label: any;
    labelName: any;
    width: number;
    scrollStart: string;
    left: number;
    browser: Genoverse;
    scrollRange: any;
    imgRange: any;
    deferreds: any[];
    scrollBuffer: number;
    threshold: number;
    clickTolerance: number;
    messages: any;
    abstract setEvents(): void;
    abstract createModel(): any;
    abstract createView(properties?: Object): any;
    abstract init(): void;
    constructor(genoverse: Genoverse, properties?: any);
    setDefaults(): void;
    setDefaultConfig(): void;
    _setCurrentConfig(): void;
    getConfig(type: string): any;
    setHeight(height: number, forceShow: boolean): number;
    changeChr(): void;
    updateName(name: string): void;
    enable(): void;
    disable(): void;
    reset(type?: string): void;
    remove(): void;
    destructor(): void;
    resetImages(): void;
    resetImageRanges(): void;
    setName(name: string): void;
    addDomElements(): void;
    addUserEventHandlers(): void;
    click(e: any): any;
    getClickedFeatures(x: any, y: any, target?: any): any;
    showMessage(code: any, additionalText?: string): void;
    hideMessage(code?: string): void;
    showError(error: any): void;
    checkHeight(): void;
    visibleFeatureHeight(): any;
    autoResize(): void;
    resize(height: number, arg?: any, saveConfig?: any): void;
    toggleExpander(saveConfig?: any): void;
    setWidth(width: number): void;
    setScale(): void;
    move(delta: number[]): void;
    moveTo(chr: string, start: number, end: number, delta: number): void;
    makeImage(myParams: any): JQuery.Deferred<any, any, any>;
    makeFirstImage(moveTo?: any): JQuery.Deferred<any, any, any>;
    render(features: any, img: any, params: any): void;
    renderBackground(features: any, img: any, params: any, height?: number): void;
    populateMenu(feature: any): any;
    abort(): void;
    destroy(): void;
}
